<?php

/**
 * Implements hook_permission().
 */
function cloudfront_path_invalidate_permission() {
  return array(
    'administer cloudfront_path_invalidate'=> array(
      'title' => t('CloudFront Path Invalidate'),
      'description' => t('Contains hooks for invalidation of paths on AWS cloudfront'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cloudfront_path_invalidate_menu() {
  $items = array();
  $items['admin/config/cloudfront_path_invalidate_settings/CDNInvalidate'] = array(
    'title' => 'CloudFront Node Invalidation',
    'description' => 'For invalidating nodes in AWS CLoudFront',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudfront_invalidation_page'),
    'access arguments' => array('administer cloudfront_path_invalidate'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/cloudfront_path_invalidate_settings/CDNkeys_dev'] = array(
    'title' => 'CloudFront Keys settings-dev',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudfront_keys_settings_page_dev'),
    'access arguments' => array('administer cloudfront_path_invalidate'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/cloudfront_path_invalidate_settings/CDNkeys_prod'] = array(
    'title' => 'CloudFront Keys settings-prod',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudfront_keys_settings_page_prod'),
    'access arguments' => array('administer cloudfront_path_invalidate'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function cloudfront_invalidation_page($form, &$form_state){
  $form['invalidation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Invalidation URL without the first leading "/" eg. test/basic/path'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Clear on AWS Cloudfront',
  );
  return $form;
}

function cloudfront_keys_settings_page_dev($form, &$form_state) {
  $form['url_dev'] = array(
    '#type' => 'textfield',
    '#title' => t('URL - dev (eg. https://www.mysite-dev.com)'),
    '#required' => TRUE,
    '#default_value' => variable_get('url_dev'),
  );
  $form['distribution_dev'] = array(
    '#type' => 'textfield',
    '#title' => t('Distribution ID - dev'),
    '#required' => TRUE,
    '#default_value' => variable_get('distribution_dev'),
  );
  $form['access_dev'] = array(
    '#type' => 'password',
    '#title' => t('Access Key - dev'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('access_dev')),
  );
  $form['secret_dev'] = array(
    '#type' => 'password',
    '#title' => t('Secret Key - dev'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('secret_dev')),
  );
  $form['homapage_dev'] = array(
    '#type' => 'textfield',
    '#title' => t('Homepage node_id or url_alias. This will include "/" with invalidation paths listed below. (eg. node/1234)'),
    '#default_value' => variable_get('homapage_dev'),
  );
  return system_settings_form($form);
}

function cloudfront_keys_settings_page_prod($form, &$form_state) {
  $form['url_prod'] = array(
    '#type' => 'textfield',
    '#title' => t('URL - prod (eg. https://www.mysite.com)'),
    '#required' => TRUE,
    '#default_value' => variable_get('url_prod'),
    '#placeholder' => 'https://mysite-dev.com',
  );
  $form['distribution_prod'] = array(
    '#type' => 'textfield',
    '#title' => t('Distribution ID - prod'),
    '#required' => TRUE,
    '#default_value' => variable_get('distribution_prod'),
  );
  $form['access_prod'] = array(
    '#type' => 'password',
    '#title' => t('Access Key - prod'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('access_prod')),
  );
  $form['secret_prod'] = array(
    '#type' => 'password',
    '#title' => t('Secret Key - prod'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('secret_prod')),
  );
  $form['homapage_prod'] = array(
    '#type' => 'textfield',
    '#title' => t('Homepage node_id or url_alias. This will include "/" with invalidation paths listed below. (eg. node/1234)'),
    '#default_value' => variable_get('homapage_prod'),
  );
  return system_settings_form($form);
}

function invalidate_on_cloudfront($paths)
{
    if($GLOBALS['base_url'] == variable_get('url_dev'))
    {
      $distribution = variable_get('distribution_dev');
      $access_key = variable_get('access_dev');
      $secret_key = variable_get('secret_dev');
      if(in_array(variable_get('homapage_dev'), $paths))
      {
        array_push($paths, "");
      }
    }
    elseif ($GLOBALS['base_url'] == variable_get('url_prod'))
    {
      $distribution = variable_get('distribution_prod');
      $access_key = variable_get('access_prod');
      $secret_key = variable_get('secret_prod');
      if(in_array(variable_get('homapage_prod'), $paths))
      {
        array_push($paths, "");
      }
    }
    else
    {
      return 0;
    }
    $i = rand();
    foreach ($paths as &$url) {
      //Invalidating object at AWS CloudFront
      $onefile = "/" . $url;
      $epoch = date('U') + $i;
      $i++;
      $xml = <<<EOD
              <InvalidationBatch>
              <Path>{$onefile}</Path>
              <CallerReference>{$distribution}{$epoch}</CallerReference>
              </InvalidationBatch>
EOD;
      /**
       * You probably don't need to change anything below here.
       */
      $len = strlen($xml);
      $date = gmdate('D, d M Y G:i:s T');
      $sig = base64_encode(
        hash_hmac('sha1', $date, $secret_key, TRUE)
      );
      $msg = "POST /2010-11-01/distribution/{$distribution}/invalidation HTTP/1.0\r\n";
      $msg .= "Host: cloudfront.amazonaws.com\r\n";
      $msg .= "Date: {$date}\r\n";
      $msg .= "Content-Type: text/xml; charset=UTF-8\r\n";
      $msg .= "Authorization: AWS {$access_key}:{$sig}\r\n";
      $msg .= "Content-Length: {$len}\r\n\r\n";
      $msg .= $xml;
      $fp = fsockopen('ssl://cloudfront.amazonaws.com', 443,
        $errno, $errstr, 30
      );
      if (!$fp) {
        //die("Connection failed: {$errno} {$errstr}\n");
        return 0;
      }
      if (!fwrite($fp, $msg))
        return 0;
      $resp = '';
      while (!feof($fp)) {
        $resp .= fgets($fp, 1024);
      }
      fclose($fp);
      if($resp = '')
        return 0;
    }
    return 1;
}

/**
 * Implements hook_path_update().
 */
function cloudfront_path_invalidate_path_update($path) {
  $paths = array(
    $path['alias'],
    $path['source']
  );
  invalidate_on_cloudfront($paths);
}

/**
 * Implements hook_path_insert().
 */
function cloudfront_path_invalidate_path_insert($path) {
  $paths = array(
    $path['alias'],
    $path['source']
  );
  invalidate_on_cloudfront($paths);
}

/**
 * Implements hook_path_delete().
 */
function cloudfront_path_invalidate_path_delete($path) {
  $paths = array(
    $path['alias'],
    $path['source']
  );
  invalidate_on_cloudfront($paths);
}

function cloudfront_invalidation_page_submit($form, &$form_state) {
  $paths = array(
    htmlspecialchars($form["invalidation_url"]["#value"], ENT_QUOTES, 'UTF-8')
  );
  if(invalidate_on_cloudfront($paths))
    drupal_set_message(t($form["invalidation_url"]["#value"] . ' has successfully been invalidated on CDN.'));
  else
    drupal_set_message(t('Error: Unable to invalidate path. Please check your AWS Credentials.'));
}