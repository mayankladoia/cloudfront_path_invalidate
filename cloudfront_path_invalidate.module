<?php

/**
 * @file
 * CloudFRont Path invalidate primary module file.
 */

/**
 * Implements hook_permission().
 */
function cloudfront_path_invalidate_permission() {
  return array(
    'administer cloudfront_path_invalidate' => array(
      'title' => t('CloudFront Path Invalidate'),
      'description' => t('Contains hooks for invalidation of paths on 
      AWS cloudfront'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cloudfront_path_invalidate_menu() {
  $items = array();
  $items['admin/config/cloudfront_path_invalidate_settings/CDNInvalidate'] = array(
    'title' => 'CloudFront Node Invalidation',
    'description' => 'For invalidating nodes in AWS CLoudFront',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudfront_path_invalidate_invalidation_page'),
    'access arguments' => array('administer cloudfront_path_invalidate'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/cloudfront_path_invalidate_settings/CDNkeys'] = array(
    'title' => 'CloudFront Keys/Host provider Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloudfront_path_invalidate_keys_settings_page'),
    'access arguments' => array('administer cloudfront_path_invalidate'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Config form for invalidating one path.
 */
function cloudfront_path_invalidate_invalidation_page($form, &$form_state) {
  $form['cloudfront_path_invalidate_invalidation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Invalidation URL without the first leading "/" 
    eg. test/basic/path'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Clear on AWS Cloudfront'),
  );
  return $form;
}

/**
 * Config form for setting AWS keys/credentials.
 */
function cloudfront_path_invalidate_keys_settings_page($form, &$form_state) {
  $form['cloudfront_path_invalidate_distribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Distribution ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('cloudfront_path_invalidate_distribution'),
  );
  $form['cloudfront_path_invalidate_access'] = array(
    '#type' => 'password',
    '#title' => t('Access Key'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('cloudfront_path_invalidate_access')),
  );
  $form['cloudfront_path_invalidate_secret'] = array(
    '#type' => 'password',
    '#title' => t('Secret Key'),
    '#required' => TRUE,
    '#attributes' => array('value' => variable_get('cloudfront_path_invalidate_secret')),
  );
  $form['cloudfront_path_invalidate_homapage'] = array(
    '#type' => 'textfield',
    '#title' => t('Homepage node_id or url_alias. This will include "/" 
    with invalidation paths listed below. (eg. node/1234)'),
    '#default_value' => variable_get('cloudfront_path_invalidate_homapage'),
  );
  $form['cloudfront_path_invalidate_host_provider'] = array(
    '#type' => 'radios',
    '#title' => t('Please select you host provider (this will clear 
    varnish cache)'),
    '#options' => array(
      t('Acquia'),
      t('Pantheon'),
      t('None of the above'),
    ),
    '#required' => TRUE,
    '#default_value' => variable_get('cloudfront_path_invalidate_host_provider'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_help().
 */
function cloudfront_path_invalidate_help($path, $arg) {
  switch ($path) {
    case 'admin/help#cloudfront_path_invalidate':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Main function that clears CDN and varnish cache.
 */
function cloudfront_path_invalidate_invalidate_on_cloudfront($paths) {
  $distribution = variable_get('cloudfront_path_invalidate_distribution');
  $access_key = variable_get('cloudfront_path_invalidate_access');
  $secret_key = variable_get('cloudfront_path_invalidate_secret');
  if ($distribution == "" || $access_key == "" || $secret_key == "") {
    return 0;
  }
  if (in_array(variable_get('cloudfront_path_invalidate_homapage'), $paths)) {
    array_push($paths, "");
  }

  /*Adding "/" to all paths.*/
  array_walk($paths,
    function (&$value, $key) {
      $value = '/' . $value;
    }
  );
  if (variable_get('cloudfront_path_invalidate_host_provider') == 1) {
    pantheon_clear_edge_paths($paths);
  }
  $i = rand();
  foreach ($paths as &$url) {
    if (variable_get('cloudfront_path_invalidate_host_provider') == 0) {
      $service = _acquia_purge_service();
      $service->addPath($url);
      if ($service->lockAcquire()) {
        $service->process();
        $service->lockRelease();
      }
    }
    /*Invalidating object at AWS CloudFront.*/
    $onefile = $url;
    $epoch = date('U') + $i;
    $i++;
    $xml = <<<EOD
      <InvalidationBatch>
      <Path>{$onefile}</Path>
      <CallerReference>{$distribution}{$epoch}</CallerReference>
      </InvalidationBatch> 
EOD;
    /* You probably don't need to change anything below here. */
    $len = strlen($xml);
    $date = gmdate('D, d M Y G:i:s T');
    $sig = base64_encode(
      hash_hmac('sha1', $date, $secret_key, TRUE)
    );
    $msg = "POST /2010-11-01/distribution/{$distribution}/invalidation HTTP/1.0\r\n";
    $msg .= "Host: cloudfront.amazonaws.com\r\n";
    $msg .= "Date: {$date}\r\n";
    $msg .= "Content-Type: text/xml; charset=UTF-8\r\n";
    $msg .= "Authorization: AWS {$access_key}:{$sig}\r\n";
    $msg .= "Content-Length: {$len}\r\n\r\n";
    $msg .= $xml;
    $fp = fsockopen('ssl://cloudfront.amazonaws.com', 443,
      $errno, $errstr, 30
    );
    if (!$fp) {
      /* Alternate Code die("Connection failed: {$errno} {$errstr}\n");.*/
      return 0;
    }
    if (!fwrite($fp, $msg)) {
      return 0;
    }
    $resp = '';
    while (!feof($fp)) {
      $resp .= fgets($fp, 1024);
    }
    fclose($fp);
    if ($resp = '') {
      return 0;
    }
  }
  return 1;
}

/**
 * Implements hook_path_update().
 */
function cloudfront_path_invalidate_path_update($path) {
  $paths = array(
    $path['alias'],
    $path['source'],
  );
  cloudfront_path_invalidate_invalidate_on_cloudfront($paths);
}

/**
 * Implements hook_path_insert().
 */
function cloudfront_path_invalidate_path_insert($path) {
  $paths = array(
    $path['alias'],
    $path['source'],
  );
  cloudfront_path_invalidate_invalidate_on_cloudfront($paths);
}

/**
 * Implements hook_path_delete().
 */
function cloudfront_path_invalidate_path_delete($path) {
  $paths = array(
    $path['alias'],
    $path['source'],
  );
  cloudfront_path_invalidate_invalidate_on_cloudfront($paths);
}

/**
 * Main function that clears CDN and varnish cache.
 */
function cloudfront_path_invalidate_invalidation_page_submit($form, &$form_state) {
  $paths = array(
    htmlspecialchars($form["cloudfront_path_invalidate_invalidation_url"]["#value"],
      ENT_QUOTES, 'UTF-8'),
  );
  if (cloudfront_path_invalidate_invalidate_on_cloudfront($paths)) {
    drupal_set_message(t('@invalidated_path has successfully been 
    invalidated on CDN.', array('@invalidated_path' => $form["cloudfront_path_invalidate_invalidation_url"]["#value"])));
  }
  else {
    drupal_set_message(t('Error: Unable to invalidate path. Please check 
    your AWS Credentials.'));
  }
}
